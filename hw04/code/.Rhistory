for (boolean in is.na(x)) {
if (boolean == FALSE) {
count <- count + 1
}
}
return (count)
}
count_missing(b)
count_missing <- function(x) {
count <- 0
for (boolean in is.na(x)) {
if (boolean == FALSE) {
count <- count + 1
}
}
return (count)
}
count_missing(b)
count_missing <- function(x) {
count <- 0
for (boolean in is.na(x)) {
if (boolean == TRUE) {
count <- count + 1
}
}
return (count)
}
count_missing(b)
rescale100 <- function(x, xmin, xmax) {
return (100 * ((x - xmin) / (xmax - xmin)))
}
m <- c(18, 15, 16, 4, 17, 9)
rescale(m)
rescale100(m, 0, 20)
drop_lowest <- function(x) {
min_score <- get_minimum(x)
return (x[!min_score])
}
drop_lowest <- function(x) {
min_score <- get_minimum(x)
return (x[!min_score])
}
scores <- c(10, 10, 40, 30, 20, 100)
drop_lowest(scores)
get_minimum <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
return (sort(x)[1])
}
return (sort(x)[1])
}
drop_lowest(scores)
score_lab <- function(x) {
if (x > 12 | x < 0) {
return ("Error: Invalid Score")
}
else if (x == 11 | x == 12) {
return (100)
}
else if (x == 10) {
return (80)
}
else if (x == 9) {
return (60)
}
else if (x == 8) {
return (40)
}
else if (x == 7) {
return (20)
}
else if (x == 6 | x < 6 && x > 0) {
return (0)
}
}
score_lab(75)
score_lab(4.5)
score_lab <- function(x) {
if (!is.integer(x)) {
return ("Error: Invalid Input")
}
else if (x > 12 | x < 0) {
return ("Error: Invalid Score")
}
else if (x == 11 | x == 12) {
return (100)
}
else if (x == 10) {
return (80)
}
else if (x == 9) {
return (60)
}
else if (x == 8) {
return (40)
}
else if (x == 7) {
return (20)
}
else if (x == 6 | x < 6 && x > 0) {
return (0)
}
}
score_lab(4.5)
score_lab(44.5)
score_lab(12)
score_lab(12)
score_lab <- function(x) {
if (x > 12 | x < 0) {
return ("Error: Invalid Score")
}
else if (x == 11 | x == 12) {
return (100)
}
else if (x == 10) {
return (80)
}
else if (x == 9) {
return (60)
}
else if (x == 8) {
return (40)
}
else if (x == 7) {
return (20)
}
else if (x == 6 | x < 6 && x > 0) {
return (0)
}
}
score_lab(12)
score_lab(14)
score_lab(9)
drop_lowest <- function(x) {
x <- x[-which.min(x)]
return (x)
}
drop_lowest(scores)
score_homework <- function(x, drop=FALSE) {
if (drop == TRUE) {
x <- drop_lowest(x)
}
return (get_average(x))
}
$ $ f
score_homework(scores, drop=TRUE)
mean(drop_lowest(scores))
score_homework(scores)
quizzes <- c(100, 80, 70, 0)
score_quiz(quizzes, drop = TRUE)
score_quiz <- function(x, drop=FALSE) {
if (drop == TRUE) {
x <- drop_lowest(x)
}
return (get_average(x))
}
score_quiz <- function(x, drop=FALSE) {
if (drop == TRUE) {
x <- drop_lowest(x)
}
return (get_average(x))
}
score_quiz(quizzes, drop = TRUE)
score_quiz(quizzes, drop = FALSE)
get_quartile3(a)
quartile(a, 0.75)
q <- get_quartile(a)
q <- get_quartile3(a)
q
q[2]
q[1]
q[1][2]
q[1][1]
q[,2]
q[1,2]
q[,1]
summary_stats <- function(x) {
minimum <- get_minimum(x)
percent10 <- get_percentile10(x)
quartile1 <- get_quartile1(x)
median <- get_median(x)
mean <- get_average(x)
quartile3 <- get_quartile3(x)
maximum <- get_maximum(x)
range <- get_range(x)
stdev <- get_stdev(x)
missing <- count_missing(x)
return (list(minimum, percent10, quartile1, median, mean,
quartile3, maximum, range, stdev, missing))
}
sample <- c(1, 4, 7, NA, 10)
summary_stats(sample)
summary_stats <- function(x) {
minimum <- get_minimum(x, na.rm=TRUE)
percent10 <- get_percentile10(x, na.rm=TRUE)
quartile1 <- get_quartile1(x, na.rm=TRUE)
median <- get_median(x, na.rm=TRUE)
mean <- get_average(x, na.rm=TRUE)
quartile3 <- get_quartile3(x, na.rm=TRUE)
maximum <- get_maximum(x, na.rm=TRUE)
range <- get_range(x, na.rm=TRUE)
stdev <- get_stdev(x, na.rm=TRUE)
missing <- count_missing(x)
return (list(minimum, percent10, quartile1, median, mean,
quartile3, maximum, range, stdev, missing))
}
summary_stats(sample)
summary_stats <- function(x) {
minimum <- get_minimum(x, na.rm=TRUE)
percent10 <- get_percentile10(x, na.rm=TRUE)
quartile1 <- get_quartile1(x, na.rm=TRUE)
median <- get_median(x, na.rm=TRUE)
mean <- get_average(x, na.rm=TRUE)
quartile3 <- get_quartile3(x, na.rm=TRUE)
maximum <- get_maximum(x, na.rm=TRUE)
range <- get_range(x, na.rm=TRUE)
stdev <- get_stdev(x, na.rm=TRUE)
missing <- count_missing(x)
return (vector(minimum, percent10, quartile1, median, mean,
quartile3, maximum, range, stdev, missing))
}
summary_stats(sample)
missing <- count_missing(x)
summary_stats <- function(x) {
minimum <- get_minimum(x, na.rm=TRUE)
percent10 <- get_percentile10(x, na.rm=TRUE)
quartile1 <- get_quartile1(x, na.rm=TRUE)
median <- get_median(x, na.rm=TRUE)
mean <- get_average(x, na.rm=TRUE)
quartile3 <- get_quartile3(x, na.rm=TRUE)
maximum <- get_maximum(x, na.rm=TRUE)
range <- get_range(x, na.rm=TRUE)
stdev <- get_stdev(x, na.rm=TRUE)
missing <- count_missing(x)
return (c(minimum, percent10, quartile1, median, mean,
quartile3, maximum, range, stdev, missing))
}
missing <- count_missing(x)
summary_stats(sample)
install.packages(testthat)
download.packages(testthat)
download.packages('testthat')
install.packages("testthat")
library(testthat)
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
a <- c(1, 2, 3, NA, 4)
b <- remove_missing(a)
b
length(b)
b == c(1, 2, 3, 4)
library(testthat)
source('functions.R')
sink('../output/test-reporter.txt')
source('functions.R')
source('functions.R')
source('functions.R')
source('functions.R')
source('functions.R')
source('functions.R')
getwd()
setwd('/Users/Lewis/stat133-hws-fall2017/hw04/code')
setwd('/Users/Lewis/stat133-hws-fall2017/hw04/code/')
setwd("/Users/Lewis/stat133-hws-fall2017/hw04/code")
setwd("/Users/Lewis/stat133-hws-fall17/hw04/code")
source('functions.R')
library(testthat)
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
library(testthat)
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
library(testthat)
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
b <- c()
remove_missing(c(NA, NA))
a <- remove_missing(c(NA, NA))
a == b
library(testthat)
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
a <- c()
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
b <- remove_missing(c(NA, NA))
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
library(testthat)
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
get_median(c(4, 56, 34, 1, 0, 4, 0, 5, 65))
remove_missing(c(4, 56, 34, 1, 0, 4, 0, 5, 65))
length(c(4, 56, 34, 1, 0, 4, 0, 5, 65))
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
get_median <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
}
sort(x)
len <- length(x)
if ((len %% 2) == 0) {
return ((x[len/2] + x[len/2 + 1]) / 2)
}
return (x[len/2 + 0.5])
}
get_median(c(4, 56, 34, 1, 0, 4, 0, 5, 65))
c
c
c
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
get_stdev(c(4, 56, 34, 1, 0, 4, 0, 5))
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
get_quartile1(c(4, 56, 34, 1, 0, 4, 0, 5))
get_quartile1(c(4, 56, 34, 1, 0, 4, 0, 5, 1))
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
rescale100(c(NA, NA, NA), 0, 10)
rescale100(c(NA, NA, 20), 0, 10)
rescale100(c(NA, NA, 20), 0, 10, na.rm=TRUE)
source('functions.R')
rescale100(c(NA, NA, 20), 0, 10, na.rm=TRUE)
rescale100(c(NA, NA, NA), 0, 10, na.rm=TRUE)
rescale100(c(NA, NA, NA), 0, 10, na.rm=TRUE)
0/0
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
rescale100(c(NA, NA, NA, NA, 80), 0, 100)
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
library(testthat)
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
rawscores <- read.csv('../data/rawdata/rawscores.csv',
stringsAsFactors = FALSE)
cleanscores <- read.csv('../data/rawdata/rawscores.csv',
stringsAsFactors = FALSE)
sink(file = '../output/summary-rawscores.txt')
str(cleanscores)
sink()
for (col in 1:16) {
coldata <- cleanscores[, col]
navals <- is.na(coldata)
for (row in 1:334) {
if (navals[row]) {
cleanscores[row, col] = 0
}
}
}
qz1scores <- cleanscores[ , 11]
rescaledqz1 <- rescale100(qz1scores, 0, 12)
cleanscores[ , 11] <- rescaledqz1
qz2scores <- cleanscores[ , 12]
rescaledqz2 <- rescale100(qz2scores, 0, 18)
cleanscores[ , 12] <- rescaledqz2
qz3scores <- cleanscores[ , 13]
rescaledqz3 <- rescale100(qz3scores, 0, 20)
cleanscores[ , 13] <- rescaledqz3
qz4scores <- cleanscores[ , 14]
rescaledqz4 <- rescale100(qz4scores, 0, 20)
cleanscores[ , 14] <- rescaledqz4
cleanscores['Lab'] <- NA
for (row in 1:334) {
cleanscores[row, 17] <- score_lab(cleanscores[row, 10])
}
cleanscores['Homework'] <- NA
for (row in 1:334) {
studentHWscores <- cleanscores[row, 1:9]
avgHWScore <- score_homework(studentHWscores, drop=TRUE)
cleanscores[row, 18] = avgHWScore
}
cleanscores['Quiz'] <- NA
for (row in 1:334) {
studentQuizScores <- cleanscores[row, 11:14]
avgQuizScore <- score_homework(studentQuizScores, drop=TRUE)
cleanscores[row, 19] = avgQuizScore
}
ex1scores <- cleanscores[ , 15]
rescaledex1 <- rescale100(ex1scores, 0, 80)
cleanscores['Test1'] <- rescaledex1
ex2scores <- cleanscores[ , 16]
rescaledex2 <- rescale100(ex2scores, 0, 90)
cleanscores['Test2'] <- rescaledex2
cleanscores['Overall'] <- NA
for (row in 1:334) {
cleanscores[row, 22] = 0.1*cleanscores[row, 17] + 0.3*cleanscores[row, 18] +
0.15*cleanscores[row, 19] + 0.2*cleanscores[row, 20] + 0.25*cleanscores[row, 21]
}
cleanscores['Grade'] <- NA
for (row in 1:334) {
cleanscores[row, 23] = letter_grade(cleanscores[row, 22])
}
filenames <- c('../output/Lab-stats.txt', '../output/Homework-stats.txt',
'../output/Quiz-stats.txt', '../output/Test1-stats.txt',
'../output/Test2-stats.txt', '../output/Overall-stats.txt')
for (i in 1:6) {
smry <- summary_stats(cleanscores[ , i + 16])
sink(filenames[i])
print_stats(smry)
sink()
}
sink('../output/summary-cleanscores.txt')
str(cleanscores)
sink()
write.csv(cleanscores, file = '../data/cleandata/cleanscores.csv', row.names = FALSE)
