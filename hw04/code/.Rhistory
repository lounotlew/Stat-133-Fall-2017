quantile(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), 0.75, na.rm=TRUE))
expect_equal(get_quartile3(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), na.rm=TRUE),
quantile(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), 0.75, na.rm=TRUE))
expect_equal(get_quartile3(c(3, 0, 47.5, 6, 34.3, 5, 67, 45)),
quantile(c(3, 0, 47.5, 6, 34.3, 5, 67, 45), 0.75))
})
test_that("Testing 'count_missing()'", {
expect_equal(count_missing(c(1, 4, 5, 6, 4, 1)), 0)
expect_equal(count_missing(c(NA, 1, 3, 4, 5, 2, NA)), 2)
expect_equal(count_missing(c(0, 0, 0, 4, 54, NA, NA, NA, 4, NA)), 4)
expect_equal(count_missing(c(NA, NA, NA, NA, NA)), 5)
})
test1 <- c(1, 4, 7, NA, 10)
test_that("Testing 'summary_stats()'", {
expect_equal(summary_stats(test1)[[1]] + summary_stats[[4]], 6.5)
})
test_that("Testing 'print_stats()'", {
})
test_that("Testing 'summary_stats()'", {
expect_equal(test1[[1]] + test1[[4]], 6.5)
})
test1 <- summary_stats(c(1, 4, 7, NA, 10))
test1[[1]]
test_that("Testing 'summary_stats()'", {
test1 <- summary_stats(c(1, 4, 7, NA, 10))
expect_equal(test1[[1]] + test1[[4]], 6.5)
})
test_that("Testing 'summary_stats()'", {
test1 <- summary_stats(c(1, 4, 7, NA, 10))
expect_equal(test1[[1]] + test1[[4]] + test[[5]], 12)
})
test_that("Testing 'summary_stats()'", {
test1 <- summary_stats(c(1, 4, 7, NA, 10))
expect_equal(test1[[1]] + test1[[4]] + test1[[5]], 12)
})
length(test1)
test_that("Testing 'summary_stats()'", {
test1 <- summary_stats(c(1, 4, 7, NA, 10))
test2 <- summary_stats(c(1/3, 1/3, 1/3, 1/3, 1/3))
expect_equal(test1[[1]] + test1[[4]] + test1[[5]], 12)
expect_equal(length(test1), 11)
expect_equal(test2[[4]], test2[[5]])
})
test_that("Testing 'summary_stats()'", {
test1 <- summary_stats(c(1, 4, 7, NA, 10))
test2 <- summary_stats(c(1/3, 1/3, 1/3, 1/3, 1/3))
expect_equal(test1[[1]] + test1[[4]] + test1[[5]], 12)
expect_equal(length(test1), 11)
expect_equal(test2[[4]], test2[[5]])
expect_equal(test2[[7]], get_stdev(c(1/3, 1/3, 1/3, 1/3, 1/3)))
})
test2 <- summary_stats(c(1/3, 1/3, 1/3, 1/3, 1/3))
test2[[7]]
test_that("Testing 'summary_stats()'", {
test1 <- summary_stats(c(1, 4, 7, NA, 10))
test2 <- summary_stats(c(1/3, 1/3, 1/3, 1/3, 1/3))
expect_equal(test1[[1]] + test1[[4]] + test1[[5]], 12)
expect_equal(length(test1), 11)
expect_equal(test2[[4]], test2[[5]])
expect_equal(test2[[7]], get_percentile90(c(1/3, 1/3, 1/3, 1/3, 1/3)))
})
library(testthat)
source('functions.R')
test_that("Testing 'remove_missing()'", {
expect_equal(remove_missing(c(1, 2, 3, NA, 4)), c(1, 2, 3, 4))
expect_equal(remove_missing(c(1, 2, 3, 4, 5)), c(1, 2, 3, 4, 5))
expect_equal(remove_missing(c(1, 3, NA, NA, 7, NA)), c(1, 3, 7))
expect_equal(remove_missing(c(NA, NA, NA, 1, NA, NA, NA)), c(1))
})
test_that("Testing 'get_minimum()'", {
expect_equal(get_minimum(c(1, 2, 3, 4, 5)), 1)
expect_equal(get_minimum(c(1, 1, 2, 3, 4)), 1)
expect_equal(get_minimum(c(3, 2, 5, NA, 1, NA, NA, 0), na.rm=TRUE), 0)
expect_equal(get_minimum(c(1, 1, 1, 1, 1)), 1)
})
test_that("Testing 'get_maximum()'", {
expect_equal(get_maximum(c(1, 2, 3, 4, 5)), 5)
expect_equal(get_maximum(c(1, 1, 2, 3, 4, 4)), 4)
expect_equal(get_maximum(c(3, 2, 5, 5, NA, 1, NA, NA, 0), na.rm=TRUE), 5)
expect_equal(get_maximum(c(5, 5, 5, 5, 5)), 5)
})
test_that("Testing 'get_range()'", {
expect_equal(get_range(c(1, 2, 3, 4, 5)), 4)
expect_equal(get_range(c(1, 1, 2, 3, 4, 4, 10)), 9)
expect_equal(get_range(c(3, 2, 5, 5, NA, 1, NA, NA, 0), na.rm=TRUE), 5)
expect_equal(get_range(c(5, 5, 5, 5, 5)), 0)
})
test_that("Testing 'get_median()'", {
expect_equal(get_median(c(4, 56, 34, 1, 0, 4, 0, 5, 65)), 0)
expect_equal(get_median(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), na.rm=TRUE), 3)
expect_equal(get_median(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), na.rm=TRUE), 4)
expect_equal(get_median(c(3, 0, 47.5, 6, 34.3, 5, 67, 45)), 20.15)
})
test_that("Testing 'get_average()'", {
expect_equal(get_average(c(4, 56, 34, 1, 0, 4, 0, 5)), 13)
expect_equal(get_average(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), na.rm=TRUE), 3)
expect_equal(get_average(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), na.rm=TRUE), 4)
expect_equal(get_average(c(3, 0, 47.5, 6, 34.3, 5, 67, 45)), 25.975)
})
test_that("Testing 'get_stdev()'", {
expect_equal(get_stdev(c(4, 56, 34, 1, 0, 4, 0, 5)),
sd(c(4, 56, 34, 1, 0, 4, 0, 5)))
expect_equal(get_stdev(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), na.rm=TRUE),
sd(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), na.rm=TRUE))
expect_equal(get_stdev(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), na.rm=TRUE),
sd(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), na.rm=TRUE))
expect_equal(get_stdev(c(3, 0, 47.5, 6, 34.3, 5, 67, 45)),
sd(c(3, 0, 47.5, 6, 34.3, 5, 67, 45)))
})
test_that("Testing 'get_percentile10()'", {
expect_equal(get_percentile10(c(4, 56, 34, 1, 0, 4, 0, 5)),
quantile(c(4, 56, 34, 1, 0, 4, 0, 5), 0.1))
expect_equal(get_percentile10(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), na.rm=TRUE),
quantile(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), 0.1, na.rm=TRUE))
expect_equal(get_percentile10(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), na.rm=TRUE),
quantile(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), 0.1, na.rm=TRUE))
expect_equal(get_percentile10(c(3, 0, 47.5, 6, 34.3, 5, 67, 45)),
quantile(c(3, 0, 47.5, 6, 34.3, 5, 67, 45), 0.1))
})
test_that("Testing 'get_percentile90()'", {
expect_equal(get_percentile90(c(4, 56, 34, 1, 0, 4, 0, 5)),
quantile(c(4, 56, 34, 1, 0, 4, 0, 5), 0.9))
expect_equal(get_percentile90(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), na.rm=TRUE),
quantile(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), 0.9, na.rm=TRUE))
expect_equal(get_percentile90(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), na.rm=TRUE),
quantile(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), 0.9, na.rm=TRUE))
expect_equal(get_percentile90(c(3, 0, 47.5, 6, 34.3, 5, 67, 45)),
quantile(c(3, 0, 47.5, 6, 34.3, 5, 67, 45), 0.9))
})
test_that("Testing 'get_quartile1()'", {
expect_equal(get_quartile1(c(4, 56, 34, 1, 0, 4, 0, 5)),
quantile(c(4, 56, 34, 1, 0, 4, 0, 5), 0.25))
expect_equal(get_quartile1(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), na.rm=TRUE),
quantile(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), 0.25, na.rm=TRUE))
expect_equal(get_quartile1(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), na.rm=TRUE),
quantile(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), 0.25, na.rm=TRUE))
expect_equal(get_quartile1(c(3, 0, 47.5, 6, 34.3, 5, 67, 45)),
quantile(c(3, 0, 47.5, 6, 34.3, 5, 67, 45), 0.25))
})
test_that("Testing 'get_quartile3()'", {
expect_equal(get_quartile3(c(4, 56, 34, 1, 0, 4, 0, 5)),
quantile(c(4, 56, 34, 1, 0, 4, 0, 5), 0.75))
expect_equal(get_quartile3(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), na.rm=TRUE),
quantile(c(NA, NA, 1, 2, 3, 4, 5, NA, NA), 0.75, na.rm=TRUE))
expect_equal(get_quartile3(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), na.rm=TRUE),
quantile(c(NA, 4, 4, 4, 4, 4, NA, NA, NA), 0.75, na.rm=TRUE))
expect_equal(get_quartile3(c(3, 0, 47.5, 6, 34.3, 5, 67, 45)),
quantile(c(3, 0, 47.5, 6, 34.3, 5, 67, 45), 0.75))
})
test_that("Testing 'count_missing()'", {
expect_equal(count_missing(c(1, 4, 5, 6, 4, 1)), 0)
expect_equal(count_missing(c(NA, 1, 3, 4, 5, 2, NA)), 2)
expect_equal(count_missing(c(0, 0, 0, 4, 54, NA, NA, NA, 4, NA)), 4)
expect_equal(count_missing(c(NA, NA, NA, NA, NA)), 5)
})
test_that("Testing 'summary_stats()'", {
test1 <- summary_stats(c(1, 4, 7, NA, 10))
test2 <- summary_stats(c(1/3, 1/3, 1/3, 1/3, 1/3))
expect_equal(test1[[1]] + test1[[4]] + test1[[5]], 12)
expect_equal(length(test1), 11)
expect_equal(test2[[4]], test2[[5]])
expect_equal(test2[[7]], get_percentile90(c(1/3, 1/3, 1/3, 1/3, 1/3)))
})
test_that("Testing 'print_stats()'", {
# Not required by Piazza Post @521
})
test_that("Testing 'rescale100()'", {
expect_equal(rescale100(c(10, 15, 0, 20), 0, 20), c(50, 75, 0, 100))
expect_equal(rescale100(c(23, 18, 17, 87), 0, 90),
c(100*23/90, 100*18/90, 100*17/90, 100*87/90))
expect_equal(rescale100(c(NA, NA, NA, NA, 80), 0, 100, na.rm=TRUE), c(80))
expect_equal(rescale100(c(0, 0, 0, 0, 0), 0, 0), c(NaN, NaN, NaN, NaN, NaN))
})
test_that("Testing 'drop_lowest()'", {
expect_equal(drop_lowest(c(0, 90, 40, 54, 23)), c(90, 40, 54, 23))
expect_equal(drop_lowest(c(0, 0, 0, 54)), c(0, 0, 54))
expect_equal(drop_lowest(c(0, 0, 0, 0, 0)), c(0, 0, 0, 0))
expect_equal(drop_lowest(c(NA, NA, 34, 12, 54, 12)), c(34, 54, 12))
})
test_that("Testing 'score_homework()'", {
expect_equal(score_homework(c(100, 80, 30, 70, 75, 85), drop=FALSE),
mean(c(100, 80, 30, 70, 75, 85)))
expect_equal(score_homework(c(100, 80, 30, 70, 75, 85), drop=TRUE),
mean(c(100, 80, 70, 75, 85)))
expect_equal(score_homework(c(NA, 80, 30, 70, 75, 12, NA, NA), drop=FALSE),
mean(c(80, 30, 70, 75, 12)))
expect_equal(score_homework(c(NA, 80, 30, 70, 75, 12, NA, NA), drop=TRUE),
mean(c(80, 30, 70, 75)))
})
test_that("Testing 'score_quiz()'", {
expect_equal(score_quiz(c(100, 80, 70, 0), drop=FALSE),
mean(c(100, 80, 70, 0)))
expect_equal(score_quiz(c(100, 80, 70, 0), drop=TRUE),
mean(c(100, 80, 70)))
expect_equal(score_quiz(c(NA, 12, 34, 45, 33, 12, NA, NA), drop=FALSE),
mean(c(12, 34, 45, 33, 12)))
expect_equal(score_quiz(c(NA, 12, 34, 45, 33, 12, NA, NA), drop=TRUE),
mean(c(12, 34, 45, 33)))
})
test_that("Testing 'score_lab()'", {
expect_equal(score_lab(100), 'Error: Invalid Score')
expect_equal(score_lab(12), 100)
expect_equal(score_lab(11), 100)
expect_equal(score_lab(10), 80)
expect_equal(score_lab(9), 60)
expect_equal(score_lab(8), 40)
expect_equal(score_lab(4), 0)
expect_equal(score_lab(-10), 'Error: Invalid Score')
})
remove_missing <- function(x) {
missing_vals <- is.na(x)
trimmed <- x[!missing_vals]
return (trimmed)
}
get_minimum <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
return (sort(x)[1])
}
return (sort(x)[1])
}
get_maximum <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
return (sort(x)[length(x)])
}
return (sort(x)[length(x)])
}
get_range <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
}
max <- get_maximum(x)
min <- get_minimum(x)
return (max - min)
}
get_percentile10 <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
}
return (quantile(x, 0.1))
}
get_percentile90 <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
}
return (quantile(x, 0.9))
}
get_median <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
}
sort(x)
len <- length(x)
if ((len %% 2) == 0) {
return ((x[len/2] + x[len/2 + 1]) / 2)
}
return (x[len/2 + 0.5])
}
get_average <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
}
sum <- 0
for (i in 1:length(x)) {
sum <- sum + x[i]
}
return (sum / length(x))
}
get_stdev <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
}
sum <- 0
mean <- get_average(x)
for (i in 1:length(x)) {
sum <- sum + (mean - x[i])^2
}
return (sqrt(sum / (length(x) - 1)))
}
get_quartile1 <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
}
return (quantile(x, 0.25))
}
get_quartile3 <- function(x, na.rm=FALSE) {
if (na.rm == TRUE) {
x <- remove_missing(x)
}
return (quantile(x, 0.75))
}
count_missing <- function(x) {
count <- 0
for (boolean in is.na(x)) {
if (boolean == TRUE) {
count <- count + 1
}
}
return (count)
}
summary_stats <- function(x) {
mis <- count_missing(x)
if (checknarm(x)) {
x <- remove_missing(x)
}
min <- get_minimum(x)
perc10 <- get_percentile10(x)
q1 <- get_quartile1(x)
med <- get_median(x)
mn <- get_average(x)
q3 <- get_quartile3(x)
perc90 <- get_percentile90(x)
max <- get_maximum(x)
rang <- get_range(x)
std <- get_stdev(x)
output <- list(minimum = min, percent10 = perc10, quartile1 = q1,
median = med, mean = mn, quartile3 = q3,
percent90 = perc90, maximum = max, range = rang,
stdev = std, missing = mis)
return (output)
}
checknarm <- function(x) {
if (is.element(TRUE, is.na(x))) {
return (TRUE)
}
else {
return (FALSE)
}
}
print_stats <- function(stats) {
line1 <- paste("minimum  : ", format(round(stats[[1]], 4), nsmall=4), sep="")
line2 <- paste("percent10: ", format(round(stats[[2]], 4), nsmall=4), sep="")
line3 <- paste("quartile1: ", format(round(stats[[3]], 4), nsmall=4), sep="")
line4 <- paste("median   : ", format(round(stats[[4]], 4), nsmall=4), sep="")
line5 <- paste("mean     : ", format(round(stats[[5]], 4), nsmall=4), sep="")
line6 <- paste("quartile3: ", format(round(stats[[6]], 4), nsmall=4), sep="")
line7 <- paste("percent90: ", format(round(stats[[7]], 4), nsmall=4), sep="")
line8 <- paste("maximum  : ", format(round(stats[[8]], 4), nsmall=4), sep="")
line9 <- paste("range    : ", format(round(stats[[9]], 4), nsmall=4), sep="")
line10 <- paste("stdev    : ", format(round(stats[[10]], 4), nsmall=4), sep="")
line11 <- paste("missing  : ", format(round(stats[[11]], 4), nsmall=4), sep="")
cat(paste(line1, line2, line3, line4, line5, line6, line7,
line8, line9, line10, line11, sep="\n"))
}
rescale100 <- function(x, xmin, xmax, na.rm=FALSE) {
if (na.rm==TRUE) {
x <- remove_missing(x)
}
return (100 * ((x - xmin) / (xmax - xmin)))
}
drop_lowest <- function(x) {
x <- remove_missing(x)
x <- x[-which.min(x)]
return (x)
}
score_homework <- function(x, drop=FALSE) {
x <- remove_missing(x)
if (drop == TRUE) {
x <- drop_lowest(x)
}
return (get_average(x))
}
score_quiz <- function(x, drop=FALSE) {
x <- remove_missing(x)
if (drop == TRUE) {
x <- drop_lowest(x)
}
return (get_average(x))
}
score_lab <- function(x) {
if (x > 12 | x < 0) {
return ("Error: Invalid Score")
}
else if (x == 11 | x == 12) {
return (100)
}
else if (x == 10) {
return (80)
}
else if (x == 9) {
return (60)
}
else if (x == 8) {
return (40)
}
else if (x == 7) {
return (20)
}
else if (x == 6 | x < 6 && x > 0) {
return (0)
}
}
letter_grade <- function(x) {
if (x >= 0 && x < 50) {
return ('F')
}
else if (x >= 50 && x < 60) {
return ('D')
}
else if (x >= 60 && x < 70) {
return ('C-')
}
else if (x >= 70 && x < 77.5) {
return ('C')
}
else if (x >= 77.5 && x < 79.5) {
return ('C+')
}
else if (x >= 79.5 && x < 82) {
return ('B-')
}
else if (x >= 82 && x < 86) {
return ('B')
}
else if (x >= 86 && x < 88) {
return ('B+')
}
else if (x >= 88 && x < 90) {
return ('A-')
}
else if (x >= 90 && x < 95) {
return ('A')
}
else if (x >= 95 && x <= 100) {
return ('A+')
}
}
library(testthat)
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
source('functions.R')
rawscores <- read.csv('../data/rawdata/rawscores.csv',
stringsAsFactors = FALSE)
cleanscores <- read.csv('../data/rawdata/rawscores.csv',
stringsAsFactors = FALSE)
sink(file = '../output/summary-rawscores.txt')
str(cleanscores)
sink()
for (col in 1:16) {
coldata <- cleanscores[, col]
navals <- is.na(coldata)
for (row in 1:334) {
if (navals[row]) {
cleanscores[row, col] = 0
}
}
}
qz1scores <- cleanscores[ , 11]
rescaledqz1 <- rescale100(qz1scores, 0, 12)
cleanscores[ , 11] <- rescaledqz1
qz2scores <- cleanscores[ , 12]
rescaledqz2 <- rescale100(qz2scores, 0, 18)
cleanscores[ , 12] <- rescaledqz2
qz3scores <- cleanscores[ , 13]
rescaledqz3 <- rescale100(qz3scores, 0, 20)
cleanscores[ , 13] <- rescaledqz3
qz4scores <- cleanscores[ , 14]
rescaledqz4 <- rescale100(qz4scores, 0, 20)
cleanscores[ , 14] <- rescaledqz4
cleanscores['Lab'] <- NA
for (row in 1:334) {
cleanscores[row, 17] <- score_lab(cleanscores[row, 10])
}
cleanscores['Homework'] <- NA
for (row in 1:334) {
studentHWscores <- cleanscores[row, 1:9]
avgHWScore <- score_homework(studentHWscores, drop=TRUE)
cleanscores[row, 18] = avgHWScore
}
cleanscores['Quiz'] <- NA
for (row in 1:334) {
studentQuizScores <- cleanscores[row, 11:14]
avgQuizScore <- score_homework(studentQuizScores, drop=TRUE)
cleanscores[row, 19] = avgQuizScore
}
ex1scores <- cleanscores[ , 15]
rescaledex1 <- rescale100(ex1scores, 0, 80)
cleanscores['Test1'] <- rescaledex1
ex2scores <- cleanscores[ , 16]
rescaledex2 <- rescale100(ex2scores, 0, 90)
cleanscores['Test2'] <- rescaledex2
cleanscores['Overall'] <- NA
for (row in 1:334) {
cleanscores[row, 22] = 0.1*cleanscores[row, 17] + 0.3*cleanscores[row, 18] +
0.15*cleanscores[row, 19] + 0.2*cleanscores[row, 20] + 0.25*cleanscores[row, 21]
}
cleanscores['Grade'] <- NA
for (row in 1:334) {
cleanscores[row, 23] = letter_grade(cleanscores[row, 22])
}
cleanscores$Grade = factor(cleanscores$Grade,
levels = c('A+', 'A', 'A-',
'B+', 'B', 'B-',
'C+', 'C', 'C-',
'D', 'F'))
filenames <- c('../output/Lab-stats.txt', '../output/Homework-stats.txt',
'../output/Quiz-stats.txt', '../output/Test1-stats.txt',
'../output/Test2-stats.txt', '../output/Overall-stats.txt')
for (i in 1:6) {
smry <- summary_stats(cleanscores[ , i + 16])
sink(filenames[i])
print_stats(smry)
sink()
}
sink('../output/summary-cleanscores.txt')
str(cleanscores)
sink()
write.csv(cleanscores, file = '../data/cleandata/cleanscores.csv', row.names = FALSE)
library(shiny); runApp('~/stat133-hws-fall17/hw04/app/gradevis.R')
